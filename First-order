#This script fits a first-order kinetic model to a series of data.

# The packages below should be installed before procedure
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

# Example dataset
t = np.array([0, 1, 2, 3, 4]) # time data
Ct = np.array([6.96, 5.24, 3.52, 2.41, 1.58]) # lycopene concentration at 140 Â°C

# Normalize concentration to C0
C0 = Ct[0]
y = np.log(Ct / C0)

# Linear regression: ln(Ct/C0) = -k1 * t
slope, intercept, r_value, p_value, se = stats.linregress(t, y)
k1 = -slope
t_half = np.log(2) / k1
r2 = r_value**2 # Calculate R^2 here

print(f"Rate constant k1 = {k1:.4f} h^-1")
print(f"Half-life t1/2 = {t_half:.2f} h")
print(f"R^2 = {r2:.3f}")

# Plot
plt.scatter(t, y, color="blue", label="Data")
# Include the R^2 value in the label for the legend
fit_label = f"Fit ($R^2$ = {r2:.3f})"
plt.plot(t, intercept + slope*t, color="red", label=fit_label)

plt.xlabel("Time (h)")
plt.ylabel("ln(Ct/C0)")
plt.legend()
plt.title("First-Order Kinetic Model")
plt.tight_layout()

# Save the figure as a high-resolution PNG with 300 dpi
plt.savefig('firstorder_plot.png', dpi=300)
print('Figure saved as firstorder_plot.png with 300 dpi.')
